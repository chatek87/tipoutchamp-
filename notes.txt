package main

import (
	"image/color"
	"log"
	"os"

	"gioui.org/app"
	"gioui.org/op"
	"gioui.org/text"
	"gioui.org/widget/material"
)

func main() {
	go func() {
		window := new(app.Window)
		err := run(window)
		if err != nil {
			log.Fatal(err)
		}
		os.Exit(0)
	}()
	app.Main()
}


	func run(window *app.Window) error {
	theme := material.NewTheme()
	var ops op.Ops
	for {
		switch e := window.Event().(type) {
		case app.DestroyEvent:
			return e.Err
		case app.FrameEvent:
			// This graphics context is used for managing the rendering state.
			gtx := app.NewContext(&ops, e)

			// Define an large label with an appropriate text:
			title := material.H1(theme, "Hello, Gio")

			// Change the color of the label.
			maroon := color.NRGBA{R: 127, G: 0, B: 0, A: 255}
			title.Color = maroon

			// Change the position of the label.
			title.Alignment = text.Middle

			// Draw the label to the graphics context.
			title.Layout(gtx)

			// Pass the drawing operations to the GPU.
			e.Frame(gtx.Ops)
		}
 	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func main() {
	go func() {
		titleColor := color.NRGBA{R: 127, G: 0, B: 0, A: 255}
		navigationColor := color.NRGBA{R: 0, G: 127, B: 0, A: 255}
		statusColor := color.NRGBA{R: 0, G: 0, B: 127, A: 255}

		// create new window
		w := new(app.Window)
		w.Option(app.Title("Poop"), app.Size(unit.Dp(400), unit.Dp(600)), app.NavigationColor(navigationColor), app.StatusColor(statusColor))

		// ops are the operations from the ui
		var ops op.Ops

		// startButton is a clickable widget
		var startButton widget.Clickable

		// th defines the material design style
		th := material.NewTheme()

		// listen for events in the window
		for {
			// grab the event
			evt := w.Event()
			// detect the type
			switch typ := evt.(type) {

			// this is sent when the application should re-render.
			case app.FrameEvent:
				gtx := app.NewContext(&ops, typ)
				title := material.H1(th, "Tipout Chooch")
				title.Color = titleColor
				title.Layout(gtx)
				// Let's try out the flexbox layout:
				layout.Flex{
					// Vertical alignment, from top to bottom
					Axis: layout.Vertical,
					// Empty space is left at the start, i.e. at the top
					Spacing: layout.SpaceStart,
				}.Layout(gtx,
					// We insert two rigid elements:
					// First one to hold a button ...
					layout.Rigid(
						func(gtx layout.Context) layout.Dimensions {
							btn := material.Button(th, &startButton, "Start")
							return btn.Layout(gtx)
						},
					),
					// ... then one to hold an empty spacer
					layout.Rigid(
						// The height of the spacer is 25 Device independent pixels
						layout.Spacer{Height: unit.Dp(25)}.Layout,
					),
				)
				typ.Frame(gtx.Ops)
			// and this is sent when the application should exit
			case app.DestroyEvent:
				os.Exit(0)
			}
		}

	}()
	app.Main()
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package main

import (
	"image/color"
	"log"
	"os"

	"gioui.org/app"
	"gioui.org/layout"
	"gioui.org/op"
	"gioui.org/text"
	"gioui.org/unit"
	"gioui.org/widget"
	"gioui.org/widget/material"
)

type C = layout.Context
type D = layout.Dimensions

func main() {
	go func() {
		w := new(app.Window)
		w.Option(app.Title("tipout champ"), app.Size(unit.Dp(400), unit.Dp(600)))
		// alternate syntax:
		// err := draw(w)
		// if err != nil {
		// 	log.Fatal(err)
		// }
		if err := draw(w); err != nil {
			log.Fatal(err)
		}
		os.Exit(0)
	}()
	app.Main()
}

func draw(w *app.Window) error {
	th := material.NewTheme()
	var ops op.Ops
	// UI elements
	var addBartenderInput widget.Editor
	// event loop
	for {
		switch e := w.Event().(type) {
		case app.DestroyEvent:
			return e.Err
		case app.FrameEvent:
			gtx := app.NewContext(&ops, e)

			layout.Flex{
				Axis: layout.Vertical,				
				Spacing: layout.SpaceStart,
			}.Layout(gtx,
				layout.Rigid(
					func(gtx C) D {
						ed := material.Editor(th, &addBartenderInput, "bartender name")

						addBartenderInput.SingleLine = true
						addBartenderInput.Alignment = text.Middle

						margins := layout.UniformInset(100)

						border := widget.Border{
							Color:        color.NRGBA{R: 204, G: 204, B: 204, A: 255},
							CornerRadius: unit.Dp(3),
							Width:        unit.Dp(3),
						}
						return margins.Layout(gtx,
							func(gtx C) D {
								return border.Layout(gtx, ed.Layout)
							},
						)
					},
				),
			)
			e.Frame(gtx.Ops) // send the operations from the context gtx to the FrameEvent
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package main

import (
	"fmt"
	"log"
	"os"

	"gioui.org/app"
	"gioui.org/layout"
	"gioui.org/op"
	"gioui.org/unit"
	"gioui.org/widget"
	"gioui.org/widget/material"
)

type C = layout.Context
type D = layout.Dimensions

func main() {
	go func() {
		w := new(app.Window)
		w.Option(app.Title("tipout champ"), app.Size(unit.Dp(400), unit.Dp(600)))
	
		if err := draw(w); err != nil {
			log.Fatal(err)
		}
		os.Exit(0)
	}()
	app.Main()
}

func draw(w *app.Window) error {
	th := material.NewTheme()
	var ops op.Ops
	// UI elements
	var addBartenderBtn widget.Clickable
	var addBartenderName widget.Editor
	var addBartenderHours widget.Editor
	var addBartenderBtnSelected bool
	// event loop
	for {
		switch e := w.Event().(type) {
		case app.DestroyEvent:
			return e.Err
		case app.FrameEvent:
			gtx := app.NewContext(&ops, e)

			title := material.H1(th, "hey bro")

			if addBartenderBtn.Clicked(gtx) {
				addBartenderBtnSelected = !addBartenderBtnSelected
				// do something, like have a few editors appear along with a 'add' button and a 'go back' or 'clear' or something
			}

			layout.W.Layout(gtx, func(gtx C) D {
				return layout.Flex{Axis: layout.Vertical}.Layout(gtx,
					layout.Rigid(func(gtx C) D {
						return title.Layout(gtx)
					}),
					layout.Rigid(func(gtx C) D {
						return layout.Spacer{Height: 20}.Layout(gtx)
					}),
					layout.Rigid(layout.Spacer{Height: 200}.Layout),
					layout.Rigid(func(gtx C) D {
						return material.Button(th, &addBartenderBtn, "add bartender").Layout(gtx)
					}),
					layout.Rigid(func(gtx C) D {
						if addBartenderBtnSelected {
							flex := layout.Flex{Axis: layout.Vertical}
							return flex.Layout(gtx,
								layout.Rigid(func(gtx C) D {
									return material.Editor(th, &addBartenderName, "bartender name").Layout(gtx)
								}),
								layout.Rigid(func(gtx C) D {
									return material.Editor(th, &addBartenderHours, "bartender hours").Layout(gtx)
								}))
						} else {
							return material.H4(th, fmt.Sprintf(": /")).Layout(gtx)
						}
					}),
					layout.Rigid(func(gtx C) D {
						return material.H6(th, fmt.Sprintf("here's some filler text")).Layout(gtx)
					}),
				)
			})
			// Pass the drawing operations to the GPU. (send the operations from the context gtx to the FrameEvent)
			e.Frame(gtx.Ops)
		}
	}
}

// func bartenderInputScreen(w *app.Window) error {

// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
